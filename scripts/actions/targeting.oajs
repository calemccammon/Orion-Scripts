//#include ../definitions/monsters.oajs

function findNearestAttackable(applyFilter) {
	const types = Orion.FindType(0xFFFF, 0xFFFF, "ground", "live|ignorefriends|mobile", 10, "gray|criminal|orange|red");
	if (types.length > 0) {
		const objects = types.map(function(type) {
			return Orion.FindObject(type);
		}).filter(function(object) {
			if (!applyFilter) {
				return false;
			} else {
				var isSummon = containsType(SUMMONS, object.Graphic());
				var isAnimated = containsType(ANIMATED_UNDEAD, object.Graphic());
				return !isSummon && !isAnimated && object.Notoriety() != 6;
			}
		}).sort(function(a, b) {
			return Orion.GetDistance(a.Serial()) - Orion.GetDistance(b.Serial());
		});
		if (objects.length > 0) {
			return objects[0];
		}
	}
	return null;
}

function containsType(a, obj) {
    var i = a.length;
    while (i--) {
       if (a[i] === obj) {
           return true;
       }
    }
    return false;
}