var kit = '0xA393';

var solution_1 = [2, 2, 3, 3];
var solution_2 = [2, 3, 2, 3];
var solution_3 = [2, 3, 3, 2];
var solution_4 = [2, 3, 4, 3, 2, 2];
var solution_5 = [2, 2, 3, 4, 3, 2];
var solution_6 = [2, 2, 3, 4, 4, 3, 2, 2];
var solution_7 = [3, 3, 2, 2];
var solution_8 = [3, 2, 3, 2];
var solution_9 = [3, 2, 2, 3];
var solution_10 = [3, 2, 1, 2, 3, 3];
var solution_11 = [3, 3, 2, 1, 2, 3];
var solution_12 = [3, 3, 2, 1, 1, 2, 3, 3];

var solutions = [solution_1, solution_2, solution_3, solution_4, solution_5, solution_6,
solution_7, solution_8, solution_9, solution_10, solution_11, solution_12];

function trainRemoveTrap() {
	while (Orion.SkillValue("Remove Trap") < 1000) {
		openKit();
		for (var i = 0; i < solutions.length; i++) {
			Orion.Print("Testing " + (i + 1));
			solve(solutions[i]);
			if(isRight()) {
				break;
			}
		}
	}
}

function solve(solution) {
	for(var i = 0; i < solution.length; i++) {
		Orion.ClearJournal();
		Orion.Wait(750);
		Orion.GetGump("last").Select(Orion.CreateGumpHook(solution[i]));
		Orion.Wait(750);
		if(isWrong()) {
			openKit();
			break;
		}
	}
}

function openKit(stub) {
	Orion.Wait(1000);
	Orion.UseSkill('Remove Trap');
	Orion.WaitForTarget(1000);
	Orion.TargetType(kit);
	if(!Orion.WaitForGump(1000)) {
		openKit();
	}
}

function isWrong(stub) {
	return Orion.InJournal("fail to disarm");
}

function isRight(stub) {
	return Orion.InJournal("successfully disarm");
}